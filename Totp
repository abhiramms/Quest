<PasswordBox x:Name="PasswordBox" Width="200">
    <PasswordBox.Template>
        <ControlTemplate TargetType="PasswordBox">
            <Grid>
                <PasswordBox x:Name="PART_PasswordBox" />
                <ToggleButton x:Name="ShowPasswordToggle" 
                              Width="20" Height="20"
                              Content="👁️">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=PART_PasswordBox, Path=Password.Length, Mode=OneWay}" Value="0">
                                    <Setter Property="IsChecked" Value="False" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
            </Grid>
        </ControlTemplate>
    </PasswordBox.Template>
</PasswordBox>





using System;
using System.Text.RegularExpressions;

class Program
{
    static void Main()
    {
        string input = "12Ab34Cd";
        bool isValid = ValidateInputFormat(input);
        
        if (isValid)
        {
            Console.WriteLine("Input is in the correct format.");
        }
        else
        {
            Console.WriteLine("Input is not in the correct format.");
        }
    }

    static bool ValidateInputFormat(string input)
    {
        // Define a regular expression pattern for the desired format
        string pattern = @"^\d{2}[A-J]{2}\d{2}[A-J]{2}$";

        // Use Regex.IsMatch to check if the input matches the pattern
        return Regex.IsMatch(input, pattern);
    }
}






using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleInputTransformation
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, char> numberLetterDictionary = new Dictionary<int, char>
            {
                { 1, 'A' },
                { 2, 'B' },
                { 3, 'C' },
                { 4, 'D' },
                { 5, 'E' },
                { 6, 'F' },
                { 7, 'G' },
                { 8, 'H' },
                { 9, 'I' },
                { 0, 'J' }
            };

            Console.Write("Enter the input string: ");
            string input = Console.ReadLine();

            string output = TransformInput(input, numberLetterDictionary);
            Console.WriteLine(output);
        }

        static string TransformInput(string input, Dictionary<int, char> dictionary)
        {
            StringBuilder output = new StringBuilder();
            int index = 0;

            while (index < input.Length)
            {
                if (index + 1 < input.Length)
                {
                    int num1 = int.Parse(input.Substring(index, 1));
                    int num2 = int.Parse(input.Substring(index + 1, 1));

                    if (dictionary.ContainsKey(num1))
                    {
                        output.Append(dictionary[num1]);
                    }
                    else
                    {
                        output.Append(num1);
                    }

                    if (dictionary.ContainsKey(num2))
                    {
                        output.Append(dictionary[num2]);
                    }
                    else
                    {
                        output.Append(num2);
                    }

                    index += 2;
                }
                else
                {
                    output.Append(input.Substring(index));
                    break;
                }
            }

            return output.ToString();
        }
    }
}






using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleInputTransformation
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, char> numberLetterDictionary = new Dictionary<int, char>
            {
                { 1, 'A' },
                { 2, 'B' },
                { 3, 'C' },
                { 4, 'D' },
                { 5, 'E' },
                { 6, 'F' },
                { 7, 'G' },
                { 8, 'H' },
                { 9, 'I' },
                { 0, 'J' }
            };

            Console.Write("Enter the input string: ");
            string input = Console.ReadLine();

            string output = TransformInput(input, numberLetterDictionary);
            Console.WriteLine(output);
        }

        static string TransformInput(string input, Dictionary<int, char> dictionary)
        {
            StringBuilder output = new StringBuilder();
            int index = 0;

            while (index < input.Length)
            {
                if (index + 2 <= input.Length)
                {
                    int num1 = int.Parse(input.Substring(index, 1));
                    int num2 = int.Parse(input.Substring(index + 1, 1));

                    if (dictionary.ContainsKey(num1) && dictionary.ContainsKey(num2))
                    {
                        output.Append($"{num1}{num2}{dictionary[num1]}{char.ToLower(dictionary[num2])}");
                    }
                    else
                    {
                        output.Append($"{num1}{num2}");
                    }

                    index += 2;
                }
                else
                {
                    output.Append(input.Substring(index));
                    break;
                }
            }

            return output.ToString();
        }
    }
}







using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleInputTransformation
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, char> numberLetterDictionary = new Dictionary<int, char>
            {
                { 1, 'A' },
                { 2, 'B' },
                { 3, 'C' },
                { 4, 'D' },
                { 5, 'E' },
                { 6, 'F' },
                { 7, 'G' },
                { 8, 'H' },
                { 9, 'I' },
                { 0, 'J' }
            };

            Console.Write("Enter the input string: ");
            string input = Console.ReadLine();

            string output = TransformInput(input, numberLetterDictionary);
            Console.WriteLine(output);
        }

        static string TransformInput(string input, Dictionary<int, char> dictionary)
        {
            StringBuilder output = new StringBuilder();
            int index = 0;

            while (index < input.Length)
            {
                if (index + 2 <= input.Length)
                {
                    int num1 = int.Parse(input.Substring(index, 1));
                    int num2 = int.Parse(input.Substring(index + 1, 1));

                    output.Append($"{num1}{num2}{dictionary[num1]}{dictionary[num2]}");

                    index += 2;
                }
                else
                {
                    output.Append(input.Substring(index));
                    break;
                }
            }

            return output.ToString();
        }
    }
}





using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleInputTransformation
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, char> numberLetterDictionary = new Dictionary<int, char>
            {
                { 1, 'A' },
                { 2, 'B' },
                { 3, 'C' },
                { 4, 'D' },
                { 5, 'E' },
                { 6, 'F' },
                { 7, 'G' },
                { 8, 'H' },
                { 9, 'I' },
                { 0, 'J' }
            };

            Console.Write("Enter the input string: ");
            string input = Console.ReadLine();

            string output = TransformInput(input, numberLetterDictionary);
            Console.WriteLine(output);
        }

        static string TransformInput(string input, Dictionary<int, char> dictionary)
        {
            StringBuilder output = new StringBuilder();
            int index = 0;

            while (index < input.Length)
            {
                if (index + 2 <= input.Length)
                {
                    int num1 = int.Parse(input.Substring(index, 1));
                    int num2 = int.Parse(input.Substring(index + 1, 1));

                    output.Append($"{num1}{num2}{dictionary[num1]}{char.ToLower(dictionary[num2])}");

                    index += 2;
                }
                else
                {
                    output.Append(input.Substring(index));
                    break;
                }
            }

            return output.ToString();
        }
    }
}





using System;
using System.Collections.Generic;
using System.Text;

namespace NumberLetterReplacement
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, char> numberLetterDictionary = new Dictionary<int, char>
            {
                { 1, 'A' },
                { 2, 'B' },
                { 3, 'C' },
                { 4, 'D' },
                { 5, 'E' },
                { 6, 'F' },
                { 7, 'G' },
                { 8, 'H' },
                { 9, 'I' },
                { 0, 'J' }
            };

            Console.Write("Enter the input: ");
            string userInput = Console.ReadLine();

            StringBuilder replacedInput = new StringBuilder();

            for (int i = 0; i < userInput.Length; i += 2)
            {
                replacedInput.Append(userInput[i]); // Keep the first character of the pair

                if (i + 1 < userInput.Length)
                {
                    char currentChar = userInput[i + 1];

                    if (char.IsDigit(currentChar))
                    {
                        int digit = int.Parse(currentChar.ToString());
                        if (numberLetterDictionary.ContainsKey(digit))
                        {
                            replacedInput.Append(numberLetterDictionary[digit]);
                        }
                    }
                    else
                    {
                        replacedInput.Append(currentChar);
                    }
                }
            }

            string finalReplacedInput = replacedInput.ToString();
            Console.WriteLine(finalReplacedInput);
        }
    }
}





using System;
using System.Collections.Generic;
using System.Text;

namespace NumberLetterReplacement
{
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, char> numberLetterDictionary = new Dictionary<int, char>
            {
                { 1, 'A' },
                { 2, 'B' },
                { 3, 'C' },
                { 4, 'D' },
                { 5, 'E' },
                { 6, 'F' },
                { 7, 'G' },
                { 8, 'H' },
                { 9, 'I' },
                { 0, 'J' }
            };

            string userInput = "345678701";

            StringBuilder replacedInput = new StringBuilder();
            replacedInput.Append(userInput.Substring(0, 2)); // Keep the first two characters as they are

            for (int i = 2; i < userInput.Length; i++)
            {
                char currentChar = userInput[i];

                if (char.IsDigit(currentChar))
                {
                    int digit = int.Parse(currentChar.ToString());
                    if (numberLetterDictionary.ContainsKey(digit))
                    {
                        replacedInput.Append(numberLetterDictionary[digit]);
                    }
                }
                else
                {
                    replacedInput.Append(currentChar);
                }
            }

            string finalReplacedInput = replacedInput.ToString();
            Console.WriteLine(finalReplacedInput);
        }
    }
}





using System;
using System.Collections.Generic;
using System.Text;

class Program
{
    static void Main()
    {
        string input = "1258";
        string formattedOutput = FormatOutput(input);
        Console.WriteLine(formattedOutput);
    }

    static string FormatOutput(string input)
    {
        Dictionary<char, string> digitToLetters = CreateDigitToLettersDictionary();
        StringBuilder formattedOutput = new StringBuilder();

        foreach (char digit in input)
        {
            if (digitToLetters.TryGetValue(digit, out string letters))
            {
                formattedOutput.Append(letters);
            }
            else
            {
                formattedOutput.Append(digit);
            }
        }

        return formattedOutput.ToString();
    }

    static Dictionary<char, string> CreateDigitToLettersDictionary()
    {
        Dictionary<char, string> digitToLetters = new Dictionary<char, string>();

        char letter = 'A';
        for (char digit = '1'; digit <= '9'; digit++)
        {
            string letters = $"{letter}{char.ToLower((char)(letter + 1))}";
            digitToLetters[digit] = letters;
            letter = (char)(letter + 2);
        }

        return digitToLetters;
    }
}



using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<char, string> digitToLetters = CreateDigitToLettersDictionary();
        
        foreach (var kvp in digitToLetters)
        {
            Console.WriteLine($"{kvp.Key}: {kvp.Value}");
        }
    }

    static Dictionary<char, string> CreateDigitToLettersDictionary()
    {
        Dictionary<char, string> digitToLetters = new Dictionary<char, string>();

        char digit = '0';
        char letter = 'A';
        while (digit <= '9')
        {
            string letters = $"{letter}{(char)(letter + 1)}";
            digitToLetters[digit] = letters;
            digit++;
            letter = (char)(letter + 2);
        }

        return digitToLetters;
    }
}




using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<char, string> digitToLetters = CreateDigitToLettersDictionary();
        
        foreach (var kvp in digitToLetters)
        {
            Console.WriteLine($"{kvp.Key}: {kvp.Value}");
        }
    }

    static Dictionary<char, string> CreateDigitToLettersDictionary()
    {
        Dictionary<char, string> digitToLetters = new Dictionary<char, string>();

        char digit = '0';
        char letter = 'A';
        while (digit <= '9')
        {
            string letters = $"{letter}{(char)(letter + 1)}";
            digitToLetters[digit] = letters;
            digit++;
            letter += 2;
        }

        return digitToLetters;
    }
}



using System;
using System.Text;

class Program
{
    static void Main()
    {
        int inputNumber = 7834;
        string formattedPattern = FormatPattern(inputNumber);
        Console.WriteLine(formattedPattern);
    }

    static string FormatPattern(int number)
    {
        string inputStr = number.ToString();
        StringBuilder patternBuilder = new StringBuilder();

        for (int i = 0; i < inputStr.Length; i++)
        {
            patternBuilder.Append(inputStr[i]);
            patternBuilder.Append((char)(inputStr[i] + ('A' - '0')));
        }

        return patternBuilder.ToString();
    }
}


using System;
using OtpNet;

namespace TimeBasedOTPConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Replace "YOUR_SECRET_KEY" with your secret key (use a random string)
            var secretKey = Base32Encoding.ToBytes("YOUR_SECRET_KEY");

            // Initialize TOTP generator with time step and T0
            var totp = new Totp(secretKey, step: 30, T0: 0);

            // Generate and display TOTP
            var otp = totp.ComputeTotp();
            Console.WriteLine($"Time-based OTP: {otp}");

            // Validate the OTP (optional)
            Console.Write("Enter the OTP for validation: ");
            string userInput = Console.ReadLine();
            bool isValid = totp.VerifyTotp(userInput);
            Console.WriteLine($"OTP Validation Result: {isValid}");
        }
    }
}
using System;
using OtpNet;

namespace TimeBasedOTPConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Replace "YOUR_SECRET_KEY" with your secret key (use a random string)
            var secretKey = Base32Encoding.ToBytes("YOUR_SECRET_KEY");

            // Calculate the T0 (initial time) for OTP generation at 12 AM (midnight)
            var now = DateTime.UtcNow;
            var midnight = new DateTime(now.Year, now.Month, now.Day, 0, 0, 0, DateTimeKind.Utc);
            long unixTimeSeconds = (long)(midnight - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;

            // Initialize TOTP generator with a custom time step (24 hours) and T0
            var totp = new Totp(secretKey, step: 24 * 60 * 60, T0: unixTimeSeconds);

            // Generate and display TOTP
            var otp = totp.ComputeTotp();
            Console.WriteLine($"Time-based OTP: {otp}");

            // Validate the OTP (optional)
            Console.Write("Enter the OTP for validation: ");
            string userInput = Console.ReadLine();
            bool isValid = totp.VerifyTotp(userInput);
            Console.WriteLine($"OTP Validation Result: {isValid}");
        }
    }
}

using System;
using OtpNet;

namespace TimeBasedOTPConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Replace "YOUR_SECRET_KEY" with your secret key (use a random string)
            var secretKey = Base32Encoding.ToBytes("YOUR_SECRET_KEY");

            // Calculate the time difference between now and the next 12 AM
            var now = DateTime.UtcNow;
            var nextMidnight = now.Date.AddDays(1).AddHours(0).AddMinutes(0).AddSeconds(0);
            var timeDifference = nextMidnight - now;

            // Convert the time difference to seconds and use it as the time step for TOTP
            var timeStep = (int)timeDifference.TotalSeconds;

            // Initialize TOTP generator with the calculated time step
            var totp = new Totp(secretKey, step: timeStep);

            // Generate and display TOTP
            var otp = totp.ComputeTotp();
            Console.WriteLine($"Time-based OTP: {otp}");

            // Validate the OTP (optional)
            Console.Write("Enter the OTP for validation: ");
            string userInput = Console.ReadLine();
            bool isValid = totp.VerifyTotp(userInput);
            Console.WriteLine($"OTP Validation Result: {isValid}");
        }
    }
}


