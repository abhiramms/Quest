using System;
using System.Text;

class Program
{
    static void Main()
    {
        int inputNumber = 7834;
        string formattedPattern = FormatPattern(inputNumber);
        Console.WriteLine(formattedPattern);
    }

    static string FormatPattern(int number)
    {
        string inputStr = number.ToString();
        StringBuilder patternBuilder = new StringBuilder();

        for (int i = 0; i < inputStr.Length; i++)
        {
            patternBuilder.Append(inputStr[i]);
            patternBuilder.Append((char)(inputStr[i] + ('A' - '0')));
        }

        return patternBuilder.ToString();
    }
}


using System;
using OtpNet;

namespace TimeBasedOTPConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Replace "YOUR_SECRET_KEY" with your secret key (use a random string)
            var secretKey = Base32Encoding.ToBytes("YOUR_SECRET_KEY");

            // Initialize TOTP generator with time step and T0
            var totp = new Totp(secretKey, step: 30, T0: 0);

            // Generate and display TOTP
            var otp = totp.ComputeTotp();
            Console.WriteLine($"Time-based OTP: {otp}");

            // Validate the OTP (optional)
            Console.Write("Enter the OTP for validation: ");
            string userInput = Console.ReadLine();
            bool isValid = totp.VerifyTotp(userInput);
            Console.WriteLine($"OTP Validation Result: {isValid}");
        }
    }
}
using System;
using OtpNet;

namespace TimeBasedOTPConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Replace "YOUR_SECRET_KEY" with your secret key (use a random string)
            var secretKey = Base32Encoding.ToBytes("YOUR_SECRET_KEY");

            // Calculate the T0 (initial time) for OTP generation at 12 AM (midnight)
            var now = DateTime.UtcNow;
            var midnight = new DateTime(now.Year, now.Month, now.Day, 0, 0, 0, DateTimeKind.Utc);
            long unixTimeSeconds = (long)(midnight - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalSeconds;

            // Initialize TOTP generator with a custom time step (24 hours) and T0
            var totp = new Totp(secretKey, step: 24 * 60 * 60, T0: unixTimeSeconds);

            // Generate and display TOTP
            var otp = totp.ComputeTotp();
            Console.WriteLine($"Time-based OTP: {otp}");

            // Validate the OTP (optional)
            Console.Write("Enter the OTP for validation: ");
            string userInput = Console.ReadLine();
            bool isValid = totp.VerifyTotp(userInput);
            Console.WriteLine($"OTP Validation Result: {isValid}");
        }
    }
}

using System;
using OtpNet;

namespace TimeBasedOTPConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Replace "YOUR_SECRET_KEY" with your secret key (use a random string)
            var secretKey = Base32Encoding.ToBytes("YOUR_SECRET_KEY");

            // Calculate the time difference between now and the next 12 AM
            var now = DateTime.UtcNow;
            var nextMidnight = now.Date.AddDays(1).AddHours(0).AddMinutes(0).AddSeconds(0);
            var timeDifference = nextMidnight - now;

            // Convert the time difference to seconds and use it as the time step for TOTP
            var timeStep = (int)timeDifference.TotalSeconds;

            // Initialize TOTP generator with the calculated time step
            var totp = new Totp(secretKey, step: timeStep);

            // Generate and display TOTP
            var otp = totp.ComputeTotp();
            Console.WriteLine($"Time-based OTP: {otp}");

            // Validate the OTP (optional)
            Console.Write("Enter the OTP for validation: ");
            string userInput = Console.ReadLine();
            bool isValid = totp.VerifyTotp(userInput);
            Console.WriteLine($"OTP Validation Result: {isValid}");
        }
    }
}


