using System;
using System.Collections.Generic;
using System.Text;

class Program
{
    static void Main()
    {
        string input = "1258";
        string formattedOutput = FormatOutput(input);
        Console.WriteLine(formattedOutput);
    }

    static string FormatOutput(string input)
    {
        Dictionary<char, string> digitToLetters = CreateDigitToLettersDictionary();
        StringBuilder formattedOutput = new StringBuilder();

        for (int i = 0; i < input.Length; i++)
        {
            if (i > 0 && i % 2 == 0)
            {
                formattedOutput.Append(digitToLetters[input[i]]);
            }
            else
            {
                formattedOutput.Append(input[i]);
            }
        }

        return formattedOutput.ToString();
    }

    static Dictionary<char, string> CreateDigitToLettersDictionary()
    {
        Dictionary<char, string> digitToLetters = new Dictionary<char, string>();

        char letter = 'A';
        for (char digit = '1'; digit <= '9'; digit++)
        {
            string letters = $"{letter}{char.ToLower((char)(letter + 1))}";
            digitToLetters[digit] = letters;
            letter = (char)(letter + 2);
        }

        return digitToLetters;
    }
}




using System;

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Enter pattern length: ");
        int patternLength = int.Parse(Console.ReadLine());

        if (patternLength < 8)
        {
            Console.WriteLine("Pattern length must be at least 8 characters.");
            return;
        }

        string pattern = GeneratePattern(patternLength);
        Console.WriteLine("Generated Pattern: " + pattern);
    }

    static string GeneratePattern(int length)
    {
        string pattern = "";
        int digits = length / 4;
        int letters = length - digits;

        for (int i = 0; i < digits; i++)
        {
            pattern += i % 2 == 0 ? "12" : "34";
        }

        for (int i = 0; i < letters; i++)
        {
            pattern += i % 2 == 0 ? "A" : "B";
        }

        return pattern;
    }
}

using System;
using System.Text;
using System.Security.Cryptography;

class Program
{
    static void Main()
    {
        int otpLength = 8;
        string pattern = "12Ab34Cd";

        string otp = GeneratePatternOTP(pattern, otpLength);
        Console.WriteLine("Generated OTP: " + otp);
    }

    static string GeneratePatternOTP(string pattern, int length)
    {
        StringBuilder otpBuilder = new StringBuilder();

        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
        {
            int patternLength = pattern.Length;

            for (int i = 0; i < length; i++)
            {
                byte[] randomBytes = new byte[1];
                rng.GetBytes(randomBytes);
                int randomIndex = randomBytes[0] % patternLength;

                otpBuilder.Append(pattern[randomIndex]);
            }
        }

        return otpBuilder.ToString();
    }
}



using System;

public class LDAPHelper
{
    public static string GetDCAddress(string ldapUrl)
    {
        try
        {
            // Create a Uri object from the LDAP URL
            var uri = new Uri(ldapUrl);

            // Extract the host or IP address from the Uri object
            string dcAddress = uri.Host;

            return dcAddress;
        }
        catch (UriFormatException)
        {
            // An exception is thrown if the LDAP URL is invalid
            return string.Empty;
        }
    }

    public static void Main()
    {
        // Test the GetDCAddress method
        string ldapUrl = "LDAP://172.29.68.33/dc=thingworx";

        string dcAddress = GetDCAddress(ldapUrl);
        if (!string.IsNullOrEmpty(dcAddress))
        {
            Console.WriteLine($"Domain Controller Address: {dcAddress}");
        }
        else
        {
            Console.WriteLine("Invalid LDAP URL.");
        }
    }
}
