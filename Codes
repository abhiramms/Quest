
using System;
using System.Text;
using System.Security.Cryptography;

class Program
{
    static void Main()
    {
        int otpLength = 8;
        string pattern = "12Ab34Cd";

        string otp = GeneratePatternOTP(pattern, otpLength);
        Console.WriteLine("Generated OTP: " + otp);
    }

    static string GeneratePatternOTP(string pattern, int length)
    {
        StringBuilder otpBuilder = new StringBuilder();

        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
        {
            int patternLength = pattern.Length;

            for (int i = 0; i < length; i++)
            {
                byte[] randomBytes = new byte[1];
                rng.GetBytes(randomBytes);
                int randomIndex = randomBytes[0] % patternLength;

                otpBuilder.Append(pattern[randomIndex]);
            }
        }

        return otpBuilder.ToString();
    }
}



using System;

public class LDAPHelper
{
    public static string GetDCAddress(string ldapUrl)
    {
        try
        {
            // Create a Uri object from the LDAP URL
            var uri = new Uri(ldapUrl);

            // Extract the host or IP address from the Uri object
            string dcAddress = uri.Host;

            return dcAddress;
        }
        catch (UriFormatException)
        {
            // An exception is thrown if the LDAP URL is invalid
            return string.Empty;
        }
    }

    public static void Main()
    {
        // Test the GetDCAddress method
        string ldapUrl = "LDAP://172.29.68.33/dc=thingworx";

        string dcAddress = GetDCAddress(ldapUrl);
        if (!string.IsNullOrEmpty(dcAddress))
        {
            Console.WriteLine($"Domain Controller Address: {dcAddress}");
        }
        else
        {
            Console.WriteLine("Invalid LDAP URL.");
        }
    }
}
